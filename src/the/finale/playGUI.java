/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package the.finale;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import static the.finale.TheFinale.xPos;
import static the.finale.TheFinale.yPos;
/**
 *
 * @author coop6470
 */
public class playGUI extends javax.swing.JFrame {

    /**
     * Creates new form playGUI
     */
    public static int xPos =0;
    public static int yPos =0;

    public static void main(String[] args) {
        JFrame frmMain = new JFrame();
        frmMain.setTitle("play");
        frmMain.setSize(800, 600); //default size will be 300 x 300 pixels
        frmMain.add(new TheFinale());
        frmMain.setLocationRelativeTo(null);
        frmMain.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frmMain.setVisible(true);
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(playGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(playGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(playGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(playGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new playGUI().setVisible(true);
            }
        });
    }

    public playGUI() {
        initComponents();
        PCard1.setBorder(null);
        PCard2.setBorder(null);
        PCard3.setBorder(null);
        PCard4.setBorder(null);
        PCard5.setBorder(null);
        DCard1.setBorder(null);
        DCard2.setBorder(null);
        DCard3.setBorder(null);
        DCard4.setBorder(null);
        DCard5.setBorder(null);
        Ace1BTN.setVisible(false);
        Ace11BTN.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panBackground = new javax.swing.JPanel(){
            public void paintComponent(Graphics g)
            {
                Image backgroundImage= null;

                String fileName = "playSCRN.png"; // put your file name here
                try {
                    backgroundImage= ImageIO.read(new File(fileName ));
                } catch (IOException e) {
                    System.out.println("File not found!");
                }
                int newWidth = 810;
                int newHeight = 636;
                backgroundImage = backgroundImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
                g.drawImage(backgroundImage, //the image we are drawing
                        0, // the left side of the image
                        0, // the top of the image
                        null);
            }
        };

        ;
        DCard3 = new javax.swing.JLabel();
        Gather = new javax.swing.JButton();
        DCard5 = new javax.swing.JLabel();
        StandBTN = new javax.swing.JButton();
        PCard5 = new javax.swing.JLabel();
        exitBTN = new javax.swing.JButton();
        PCard4 = new javax.swing.JLabel();
        DCard4 = new javax.swing.JLabel();
        DCard2 = new javax.swing.JLabel();
        PCard2 = new javax.swing.JLabel();
        PCard3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        RuleBTN2 = new javax.swing.JButton();
        DCard1 = new javax.swing.JLabel();
        PCard1 = new javax.swing.JLabel();
        ChipSlider = new javax.swing.JSlider();
        lblChips = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblChipDisplay = new javax.swing.JLabel();
        ChipNum = new javax.swing.JLabel();
        Ace1BTN = new javax.swing.JButton();
        Ace11BTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                panBackgroundMouseMoved(evt);
            }
        });

        DCard3.setText(" ");
        DCard3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));

        Gather.setIcon(new javax.swing.ImageIcon(getClass().getResource("/the/finale/CardBack.png"))); // NOI18N
        Gather.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 240, 240), 3));
        Gather.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GatherActionPerformed(evt);
            }
        });

        DCard5.setText(" ");
        DCard5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));

        StandBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/the/finale/NoMoCardBack.png"))); // NOI18N
        StandBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 240, 240), 3));
        StandBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StandBTNActionPerformed(evt);
            }
        });

        PCard5.setText(" ");
        PCard5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));

        exitBTN.setText("Exit");
        exitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBTNActionPerformed(evt);
            }
        });

        PCard4.setText(" ");
        PCard4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));

        DCard4.setText(" ");
        DCard4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));

        DCard2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/the/finale/CardBack.png"))); // NOI18N
        DCard2.setText(" ");
        DCard2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));

        PCard2.setText(" ");
        PCard2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));

        PCard3.setText(" ");
        PCard3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));

        jLabel1.setText("Hit");

        RuleBTN2.setText("Rules");
        RuleBTN2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RuleBTN2ActionPerformed(evt);
            }
        });

        DCard1.setText(" ");
        DCard1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0), 2));

        PCard1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 0, 0), 2, true));

        ChipSlider.setBackground(new java.awt.Color(0, 153, 153));
        ChipSlider.setForeground(new java.awt.Color(255, 0, 51));
        ChipSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                ChipSliderMouseDragged(evt);
            }
        });

        lblChips.setForeground(new java.awt.Color(255, 255, 255));
        lblChips.setText("250");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Chips being gambled");

        lblChipDisplay.setForeground(new java.awt.Color(255, 255, 255));

        ChipNum.setForeground(new java.awt.Color(255, 255, 255));
        ChipNum.setText("Owned Chips");

        Ace1BTN.setText("One");
        Ace1BTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Ace1BTNMouseClicked(evt);
            }
        });

        Ace11BTN.setText("Eleven");
        Ace11BTN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Ace11BTNMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panBackgroundLayout = new javax.swing.GroupLayout(panBackground);
        panBackground.setLayout(panBackgroundLayout);
        panBackgroundLayout.setHorizontalGroup(
                panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                .addComponent(exitBTN)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(RuleBTN2)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                .addGap(94, 94, 94)
                                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                                .addGap(0, 486, Short.MAX_VALUE)
                                                                                .addComponent(ChipSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                                .addGap(169, 169, 169)
                                                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                        .addComponent(PCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(DCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                                                .addGap(6, 6, 6)
                                                                                                .addComponent(DCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(DCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(DCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(DCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panBackgroundLayout.createSequentialGroup()
                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                                                                .addGap(15, 15, 15)
                                                                                                                .addComponent(Ace1BTN)
                                                                                                                .addGap(18, 18, 18)
                                                                                                                .addComponent(Ace11BTN))
                                                                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                                                                .addComponent(PCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                                .addComponent(PCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                                .addComponent(PCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                                                .addComponent(PCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                                                .addComponent(jLabel2)
                                                                                                .addGap(46, 46, 46))
                                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panBackgroundLayout.createSequentialGroup()
                                                                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                                        .addComponent(lblChipDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                                        .addComponent(ChipNum))
                                                                                                .addGap(57, 57, 57)))))))
                                                .addContainerGap())
                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                .addGap(161, 161, 161)
                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                .addComponent(Gather, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(StandBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panBackgroundLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(lblChips)
                                                .addGap(90, 90, 90))))
        );
        panBackgroundLayout.setVerticalGroup(
                panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                .addGap(55, 198, Short.MAX_VALUE)
                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(DCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(DCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(DCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(DCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(DCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(69, 69, 69)
                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(Ace11BTN)
                                                        .addComponent(Ace1BTN))
                                                .addGap(21, 21, 21))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panBackgroundLayout.createSequentialGroup()
                                                .addGap(72, 72, 72)
                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(StandBTN)
                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(Gather)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(exitBTN)
                                                .addComponent(RuleBTN2))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panBackgroundLayout.createSequentialGroup()
                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                                .addComponent(PCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(42, 42, 42))
                                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                                .addComponent(ChipNum)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(lblChipDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(11, 11, 11)))
                                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(11, 11, 11)
                                                                .addComponent(lblChips)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                .addComponent(PCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(35, 35, 35))
                                                        .addGroup(panBackgroundLayout.createSequentialGroup()
                                                                .addGroup(panBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(PCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(PCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(67, 67, 67)))
                                                .addComponent(ChipSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(37, 37, 37))
                                        .addComponent(PCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBTNActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);//makes this screen invisible while making start gui visible
        new StartGUI().setVisible(true);
    }//GEN-LAST:event_exitBTNActionPerformed

    private void RuleBTN2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RuleBTN2ActionPerformed
        // TODO add your handling code here:
        //makes the rules screen visible while making the start gui invisible
        new RuleGUI().setVisible(true);
    }//GEN-LAST:event_RuleBTN2ActionPerformed
    //variable index
    int handNum =0;
    card Hand[] = new card[5];
    card dealerHand[] = new card[5];
    int playerHandTotal = 0;
    int dealerHandTotal = 0;
    int totalChips = 500;
    int gambledChips = totalChips/2;
    double xPos2 = 0;
    char roundOutcome = ' ';
    int wins = 0;
    int loses = 0;
    int draws = 0;
    Deck deck = new Deck();
    int numOfDealerCards = 0;
    int counter = 0;
    int roundNum = 0;



    public static card[] hit (card array[],int cardNum, Deck deck ){
        array[cardNum] = new card();
        deck.checkDeck(array[cardNum], deck.card);
        deck.addDeck(array[cardNum], deck.card);
        return array;//when called upon should raise the value of who is hitting's card int by 1
    }

    public void reset() throws IOException{
        counter = 0;
        PCard1.setBorder(null);
        PCard2.setBorder(null);
        PCard3.setBorder(null);
        PCard4.setBorder(null);
        PCard5.setBorder(null);
        PCard1.setIcon(null);
        PCard2.setIcon(null);
        PCard3.setIcon(null);
        PCard4.setIcon(null);
        PCard5.setIcon(null);
        DCard1.setBorder(null);
        DCard2.setBorder(null);
        DCard3.setBorder(null);
        DCard4.setBorder(null);
        DCard5.setBorder(null);
        DCard1.setIcon(null);
        DCard2.setIcon(null);
        DCard3.setIcon(null);
        DCard4.setIcon(null);
        DCard5.setIcon(null);
        Gather.setEnabled(true);
        ChipSlider.setEnabled(true);
        numOfDealerCards = 0;
        DCard2.setIcon(new ImageIcon(ImageIO.read(new File("CardBack.png"))));

        for (int i = 0; i < Hand.length; i++){
            Hand[i] = null;
        }

        for (int i = 0; i < dealerHand.length; i++){
            dealerHand[i] = null;
        }
        //DCard2.setIcon(new ImageIcon("CardBack.png"));



    }

    private void GatherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GatherActionPerformed
        // TODO add your handling code here:
        ChipSlider.setEnabled(false);


        Hand[handNum] =  new card();



        switch (handNum){
            case 0:
                playerHandTotal = Plays.Plays(Hand, handNum, PCard1, Ace1BTN, Ace11BTN, playerHandTotal);
                break;
            case 1:
                playerHandTotal = Plays.Plays(Hand, handNum, PCard2, Ace1BTN, Ace11BTN, playerHandTotal);
                break;
            case 2:
                playerHandTotal = Plays.Plays(Hand, handNum, PCard3, Ace1BTN, Ace11BTN, playerHandTotal);
                break;
            case 3:
                playerHandTotal = Plays.Plays(Hand, handNum, PCard4, Ace1BTN, Ace11BTN, playerHandTotal);
                break;
            case 4:
                playerHandTotal = Plays.Plays(Hand, handNum, PCard5, Ace1BTN, Ace11BTN, playerHandTotal);
                break;
        }
        System.out.print(playerHandTotal);

        if (playerHandTotal <= 21){
            handNum++;
        } else{//locks hit button if user busts
            Gather.setEnabled(false);
        }
        if (handNum == 5){
            //lock button
            Gather.setEnabled(false);
        }

        if (!Gather.isEnabled()){ //determine winner of round
            roundOutcome = Plays.determineWinner(playerHandTotal, dealerHandTotal, roundOutcome);
            totalChips = totalChips - gambledChips;
            roundNum++;
            handNum = 0;
            playerHandTotal = 0;
            dealerHandTotal = 0;

            System.out.print(roundOutcome);
            roundOutcome = ' ';
            DCard1.setIcon(new ImageIcon("CardBack.png"));
            try {
                reset();
            } catch (IOException ex) {
                System.out.print("File Not Found");
            }

        }//end of if

        System.out.print(roundOutcome);

    }//GEN-LAST:event_GatherActionPerformed

    private void ChipSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChipSliderMouseDragged

        /**
         * This method checks the slider to determine how many chips are gambled each turn
         * works based off how many chips are in the users possession
         */
        xPos2 = evt.getX(); //x postion of the mouse

        if (xPos2 < 1){//capping how far the user drags the mouse to the slider
            xPos2 = 1;//10 is the lowest number of chips that can be bet
        }
        if (xPos2 > 200){//capping how far the user drags the mouse to the slider
            xPos2 = 200;//195 is the high end
        }

        if (ChipSlider.isEnabled()){
            gambledChips = Plays.chipCalculation(gambledChips, totalChips, xPos2, lblChips);
        }

        lblChipDisplay.setText(String.valueOf(totalChips));

    }//GEN-LAST:event_ChipSliderMouseDragged

    private void StandBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StandBTNActionPerformed
        // TODO add your handling code here:
        //lock button
        Gather.setEnabled(false);


        for (int i = 0; i < dealerHand.length; i++){
            switch (i){
                case (1)://second card
                    dealerHandTotal = Plays.Plays(dealerHand, 1, DCard2, dealerHandTotal);
                case (2)://third card
                    if (dealerHand[2] != null){//if they drew a third card
                        dealerHandTotal = Plays.Plays(dealerHand, 2, DCard3, dealerHandTotal);
                    }
                case (3)://fourth card
                    if (dealerHand[3] != null){//if they drew a fourth card
                        dealerHandTotal = Plays.Plays(dealerHand, 3, DCard4, dealerHandTotal);
                    }
                case (4)://fifth card
                    if (dealerHand[4] != null){//if they drew a fourth card
                        dealerHandTotal = Plays.Plays(dealerHand, 4, DCard5, dealerHandTotal);
                    }
            }
        }


        if (!Gather.isEnabled()){ //determine winner of round
            roundOutcome = Plays.determineWinner(playerHandTotal, dealerHandTotal, roundOutcome);
            System.out.print(roundOutcome);
            roundOutcome = ' ';
            DCard1.setIcon(new ImageIcon("CardBack.png"));
            try {
                reset();
            } catch (IOException ex) {
                System.out.print("File Not Found");
            }
        }
    }//GEN-LAST:event_StandBTNActionPerformed

    private void panBackgroundMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panBackgroundMouseMoved
        // TODO add your handling code here:
        lblChipDisplay.setText(String.valueOf(totalChips));
        counter++;

        if (counter<2){
            for (int i = 0; i < 2; i++){
                //drawing a card from the deck
                dealerHand[i] = new card();
                deck.checkDeck(dealerHand[i], deck.card);
                deck.addDeck(dealerHand[i], deck.card);

                dealerHandTotal = dealerHandTotal + dealerHand[i].suitInt;
                numOfDealerCards++;
            }

            //dealer ai
            while (dealerHandTotal < 17){
                dealerHand = hit(dealerHand, numOfDealerCards, deck);
                numOfDealerCards++;
                dealerHandTotal = dealerHandTotal + dealerHand[numOfDealerCards - 1].suitInt;

            }//end of while


            dealerHandTotal = Plays.Plays(dealerHand, 0, DCard1, dealerHandTotal);

        }//end of if
    }//GEN-LAST:event_panBackgroundMouseMoved

    private void Ace1BTNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Ace1BTNMouseClicked
        // TODO add your handling code here:
        playerHandTotal = Plays.aceButton(Ace1BTN, Ace11BTN, false, playerHandTotal, 1);

    }//GEN-LAST:event_Ace1BTNMouseClicked

    private void Ace11BTNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Ace11BTNMouseClicked
        // TODO add your handling code here:
        playerHandTotal = Plays.aceButton(Ace1BTN, Ace11BTN, false, playerHandTotal, 11);

    }//GEN-LAST:event_Ace11BTNMouseClicked


    /**
     * @param args the command line arguments
     */



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Ace11BTN;
    private javax.swing.JButton Ace1BTN;
    private javax.swing.JLabel ChipNum;
    private javax.swing.JSlider ChipSlider;
    private javax.swing.JLabel DCard1;
    private javax.swing.JLabel DCard2;
    private javax.swing.JLabel DCard3;
    private javax.swing.JLabel DCard4;
    private javax.swing.JLabel DCard5;
    private javax.swing.JButton Gather;
    private javax.swing.JLabel PCard1;
    private javax.swing.JLabel PCard2;
    private javax.swing.JLabel PCard3;
    private javax.swing.JLabel PCard4;
    private javax.swing.JLabel PCard5;
    private javax.swing.JButton RuleBTN2;
    private javax.swing.JButton StandBTN;
    private javax.swing.JButton exitBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblChipDisplay;
    private javax.swing.JLabel lblChips;
    private javax.swing.JPanel panBackground;
    // End of variables declaration//GEN-END:variables

}